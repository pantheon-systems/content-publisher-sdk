name: Release

on:
  push:
    branches:
      - main
      - ag-pcc-2213-github-workflow-for-npm-release

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  CI: true
  IS_CICD: true

jobs:
  release:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Fetch
        run: git fetch main

      - name: Setup PNPM
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Packages
        run: pnpm run build

      - name: Prep commit message
        id: prep_commit
        run: |
          NEW_VERSION=$(pnpm changeset status --output=release.json && jq -r '.releases[0].newVersion' release.json && rm release.json)
          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "New version: $NEW_VERSION"

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@e0145edc7d9d8679003495b11f87bd8ef63c0cba
        with:
          title: "Release v${{steps.prep_commit.outputs.NEW_VERSION}}"
          commit: "Release v${{steps.prep_commit.outputs.NEW_VERSION}}"
          version: pnpm ci:version
          publish: pnpm ci:publish
        env:
          HUSKY: "0"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check for pre-release versions
        if: steps.changesets.outputs.published == 'true'
        id: prerelease_check
        run: |
          if echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -e 'any(.[] | .version; contains("-"))'; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Tag release branch as 'stable'
        if:
          steps.changesets.outputs.published == 'true' &&
          steps.prerelease_check.outputs.is_prerelease == 'false'
        run: |
          git tag -a stable -f -m "Release v${{steps.prep_commit.outputs.NEW_VERSION}}"
          git push origin stable --force
